//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google_chat.proto

package org.matrix.dma.gchat.proto;

@kotlin.jvm.JvmName("-initializeslashCommandMetadata")
public inline fun slashCommandMetadata(block: org.matrix.dma.gchat.proto.SlashCommandMetadataKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.SlashCommandMetadata =
  org.matrix.dma.gchat.proto.SlashCommandMetadataKt.Dsl._create(org.matrix.dma.gchat.proto.SlashCommandMetadata.newBuilder()).apply { block() }._build()
public object SlashCommandMetadataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.matrix.dma.gchat.proto.SlashCommandMetadata.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.matrix.dma.gchat.proto.SlashCommandMetadata.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.matrix.dma.gchat.proto.SlashCommandMetadata = _builder.build()

    /**
     * <code>optional .UserId id = 1;</code>
     */
    public var id: org.matrix.dma.gchat.proto.UserId
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <code>optional .UserId id = 1;</code>
     */
    public fun clearId() {
      _builder.clearId()
    }
    /**
     * <code>optional .UserId id = 1;</code>
     * @return Whether the id field is set.
     */
    public fun hasId(): kotlin.Boolean {
      return _builder.hasId()
    }
    public val SlashCommandMetadataKt.Dsl.idOrNull: org.matrix.dma.gchat.proto.UserId?
      get() = _builder.idOrNull

    /**
     * <code>optional .SlashCommandMetadata.Type type = 2;</code>
     */
    public var type: org.matrix.dma.gchat.proto.SlashCommandMetadata.Type
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>optional .SlashCommandMetadata.Type type = 2;</code>
     */
    public fun clearType() {
      _builder.clearType()
    }
    /**
     * <code>optional .SlashCommandMetadata.Type type = 2;</code>
     * @return Whether the type field is set.
     */
    public fun hasType(): kotlin.Boolean {
      return _builder.hasType()
    }

    /**
     * <code>optional string command_name = 3;</code>
     */
    public var commandName: kotlin.String
      @JvmName("getCommandName")
      get() = _builder.getCommandName()
      @JvmName("setCommandName")
      set(value) {
        _builder.setCommandName(value)
      }
    /**
     * <code>optional string command_name = 3;</code>
     */
    public fun clearCommandName() {
      _builder.clearCommandName()
    }
    /**
     * <code>optional string command_name = 3;</code>
     * @return Whether the commandName field is set.
     */
    public fun hasCommandName(): kotlin.Boolean {
      return _builder.hasCommandName()
    }

    /**
     * <code>optional int64 command_id = 4;</code>
     */
    public var commandId: kotlin.Long
      @JvmName("getCommandId")
      get() = _builder.getCommandId()
      @JvmName("setCommandId")
      set(value) {
        _builder.setCommandId(value)
      }
    /**
     * <code>optional int64 command_id = 4;</code>
     */
    public fun clearCommandId() {
      _builder.clearCommandId()
    }
    /**
     * <code>optional int64 command_id = 4;</code>
     * @return Whether the commandId field is set.
     */
    public fun hasCommandId(): kotlin.Boolean {
      return _builder.hasCommandId()
    }

    /**
     * <code>optional string arguments_hint = 5;</code>
     */
    public var argumentsHint: kotlin.String
      @JvmName("getArgumentsHint")
      get() = _builder.getArgumentsHint()
      @JvmName("setArgumentsHint")
      set(value) {
        _builder.setArgumentsHint(value)
      }
    /**
     * <code>optional string arguments_hint = 5;</code>
     */
    public fun clearArgumentsHint() {
      _builder.clearArgumentsHint()
    }
    /**
     * <code>optional string arguments_hint = 5;</code>
     * @return Whether the argumentsHint field is set.
     */
    public fun hasArgumentsHint(): kotlin.Boolean {
      return _builder.hasArgumentsHint()
    }

    /**
     * <code>optional bool triggers_dialog = 6;</code>
     */
    public var triggersDialog: kotlin.Boolean
      @JvmName("getTriggersDialog")
      get() = _builder.getTriggersDialog()
      @JvmName("setTriggersDialog")
      set(value) {
        _builder.setTriggersDialog(value)
      }
    /**
     * <code>optional bool triggers_dialog = 6;</code>
     */
    public fun clearTriggersDialog() {
      _builder.clearTriggersDialog()
    }
    /**
     * <code>optional bool triggers_dialog = 6;</code>
     * @return Whether the triggersDialog field is set.
     */
    public fun hasTriggersDialog(): kotlin.Boolean {
      return _builder.hasTriggersDialog()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.SlashCommandMetadata.copy(block: org.matrix.dma.gchat.proto.SlashCommandMetadataKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.SlashCommandMetadata =
  org.matrix.dma.gchat.proto.SlashCommandMetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.matrix.dma.gchat.proto.SlashCommandMetadataOrBuilder.idOrNull: org.matrix.dma.gchat.proto.UserId?
  get() = if (hasId()) getId() else null

