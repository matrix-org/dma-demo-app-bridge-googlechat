//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google_chat.proto

package org.matrix.dma.gchat.proto;

@kotlin.jvm.JvmName("-initializeurl")
public inline fun url(block: org.matrix.dma.gchat.proto.UrlKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.Url =
  org.matrix.dma.gchat.proto.UrlKt.Dsl._create(org.matrix.dma.gchat.proto.Url.newBuilder()).apply { block() }._build()
public object UrlKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.matrix.dma.gchat.proto.Url.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.matrix.dma.gchat.proto.Url.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.matrix.dma.gchat.proto.Url = _builder.build()

    /**
     * <pre>
     *private_do_not_access_or_else_safe_url_wrapped_value
     * </pre>
     *
     * <code>optional string url = 3;</code>
     */
    public var url: kotlin.String
      @JvmName("getUrl")
      get() = _builder.getUrl()
      @JvmName("setUrl")
      set(value) {
        _builder.setUrl(value)
      }
    /**
     * <pre>
     *private_do_not_access_or_else_safe_url_wrapped_value
     * </pre>
     *
     * <code>optional string url = 3;</code>
     */
    public fun clearUrl() {
      _builder.clearUrl()
    }
    /**
     * <pre>
     *private_do_not_access_or_else_safe_url_wrapped_value
     * </pre>
     *
     * <code>optional string url = 3;</code>
     * @return Whether the url field is set.
     */
    public fun hasUrl(): kotlin.Boolean {
      return _builder.hasUrl()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.Url.copy(block: org.matrix.dma.gchat.proto.UrlKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.Url =
  org.matrix.dma.gchat.proto.UrlKt.Dsl._create(this.toBuilder()).apply { block() }._build()

