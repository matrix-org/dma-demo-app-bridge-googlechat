//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google_chat.proto

package org.matrix.dma.gchat.proto;

@kotlin.jvm.JvmName("-initializeinviteState")
public inline fun inviteState(block: org.matrix.dma.gchat.proto.InviteStateKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.InviteState =
  org.matrix.dma.gchat.proto.InviteStateKt.Dsl._create(org.matrix.dma.gchat.proto.InviteState.newBuilder()).apply { block() }._build()
public object InviteStateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.matrix.dma.gchat.proto.InviteState.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.matrix.dma.gchat.proto.InviteState.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.matrix.dma.gchat.proto.InviteState = _builder.build()

    /**
     * <code>optional .UserId inviter_user_id = 1;</code>
     */
    public var inviterUserId: org.matrix.dma.gchat.proto.UserId
      @JvmName("getInviterUserId")
      get() = _builder.getInviterUserId()
      @JvmName("setInviterUserId")
      set(value) {
        _builder.setInviterUserId(value)
      }
    /**
     * <code>optional .UserId inviter_user_id = 1;</code>
     */
    public fun clearInviterUserId() {
      _builder.clearInviterUserId()
    }
    /**
     * <code>optional .UserId inviter_user_id = 1;</code>
     * @return Whether the inviterUserId field is set.
     */
    public fun hasInviterUserId(): kotlin.Boolean {
      return _builder.hasInviterUserId()
    }
    public val InviteStateKt.Dsl.inviterUserIdOrNull: org.matrix.dma.gchat.proto.UserId?
      get() = _builder.inviterUserIdOrNull

    /**
     * <code>optional .MessageId invitation_message_id = 2;</code>
     */
    public var invitationMessageId: org.matrix.dma.gchat.proto.MessageId
      @JvmName("getInvitationMessageId")
      get() = _builder.getInvitationMessageId()
      @JvmName("setInvitationMessageId")
      set(value) {
        _builder.setInvitationMessageId(value)
      }
    /**
     * <code>optional .MessageId invitation_message_id = 2;</code>
     */
    public fun clearInvitationMessageId() {
      _builder.clearInvitationMessageId()
    }
    /**
     * <code>optional .MessageId invitation_message_id = 2;</code>
     * @return Whether the invitationMessageId field is set.
     */
    public fun hasInvitationMessageId(): kotlin.Boolean {
      return _builder.hasInvitationMessageId()
    }
    public val InviteStateKt.Dsl.invitationMessageIdOrNull: org.matrix.dma.gchat.proto.MessageId?
      get() = _builder.invitationMessageIdOrNull

    /**
     * <code>optional bool show_welcome_mat = 3;</code>
     */
    public var showWelcomeMat: kotlin.Boolean
      @JvmName("getShowWelcomeMat")
      get() = _builder.getShowWelcomeMat()
      @JvmName("setShowWelcomeMat")
      set(value) {
        _builder.setShowWelcomeMat(value)
      }
    /**
     * <code>optional bool show_welcome_mat = 3;</code>
     */
    public fun clearShowWelcomeMat() {
      _builder.clearShowWelcomeMat()
    }
    /**
     * <code>optional bool show_welcome_mat = 3;</code>
     * @return Whether the showWelcomeMat field is set.
     */
    public fun hasShowWelcomeMat(): kotlin.Boolean {
      return _builder.hasShowWelcomeMat()
    }

    /**
     * <code>optional .InviteType invite_type = 5;</code>
     */
    public var inviteType: org.matrix.dma.gchat.proto.InviteType
      @JvmName("getInviteType")
      get() = _builder.getInviteType()
      @JvmName("setInviteType")
      set(value) {
        _builder.setInviteType(value)
      }
    /**
     * <code>optional .InviteType invite_type = 5;</code>
     */
    public fun clearInviteType() {
      _builder.clearInviteType()
    }
    /**
     * <code>optional .InviteType invite_type = 5;</code>
     * @return Whether the inviteType field is set.
     */
    public fun hasInviteType(): kotlin.Boolean {
      return _builder.hasInviteType()
    }
    public val InviteStateKt.Dsl.inviteTypeOrNull: org.matrix.dma.gchat.proto.InviteType?
      get() = _builder.inviteTypeOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.InviteState.copy(block: org.matrix.dma.gchat.proto.InviteStateKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.InviteState =
  org.matrix.dma.gchat.proto.InviteStateKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.matrix.dma.gchat.proto.InviteStateOrBuilder.inviterUserIdOrNull: org.matrix.dma.gchat.proto.UserId?
  get() = if (hasInviterUserId()) getInviterUserId() else null

public val org.matrix.dma.gchat.proto.InviteStateOrBuilder.invitationMessageIdOrNull: org.matrix.dma.gchat.proto.MessageId?
  get() = if (hasInvitationMessageId()) getInvitationMessageId() else null

public val org.matrix.dma.gchat.proto.InviteStateOrBuilder.inviteTypeOrNull: org.matrix.dma.gchat.proto.InviteType?
  get() = if (hasInviteType()) getInviteType() else null

