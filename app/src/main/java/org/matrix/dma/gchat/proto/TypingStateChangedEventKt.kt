//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google_chat.proto

package org.matrix.dma.gchat.proto;

@kotlin.jvm.JvmName("-initializetypingStateChangedEvent")
public inline fun typingStateChangedEvent(block: org.matrix.dma.gchat.proto.TypingStateChangedEventKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.TypingStateChangedEvent =
  org.matrix.dma.gchat.proto.TypingStateChangedEventKt.Dsl._create(org.matrix.dma.gchat.proto.TypingStateChangedEvent.newBuilder()).apply { block() }._build()
public object TypingStateChangedEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.matrix.dma.gchat.proto.TypingStateChangedEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.matrix.dma.gchat.proto.TypingStateChangedEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.matrix.dma.gchat.proto.TypingStateChangedEvent = _builder.build()

    /**
     * <code>optional .TypingState state = 1;</code>
     */
    public var state: org.matrix.dma.gchat.proto.TypingState
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * <code>optional .TypingState state = 1;</code>
     */
    public fun clearState() {
      _builder.clearState()
    }
    /**
     * <code>optional .TypingState state = 1;</code>
     * @return Whether the state field is set.
     */
    public fun hasState(): kotlin.Boolean {
      return _builder.hasState()
    }

    /**
     * <code>optional .UserId user_id = 2;</code>
     */
    public var userId: org.matrix.dma.gchat.proto.UserId
      @JvmName("getUserId")
      get() = _builder.getUserId()
      @JvmName("setUserId")
      set(value) {
        _builder.setUserId(value)
      }
    /**
     * <code>optional .UserId user_id = 2;</code>
     */
    public fun clearUserId() {
      _builder.clearUserId()
    }
    /**
     * <code>optional .UserId user_id = 2;</code>
     * @return Whether the userId field is set.
     */
    public fun hasUserId(): kotlin.Boolean {
      return _builder.hasUserId()
    }
    public val TypingStateChangedEventKt.Dsl.userIdOrNull: org.matrix.dma.gchat.proto.UserId?
      get() = _builder.userIdOrNull

    /**
     * <code>optional .TypingContext context = 3;</code>
     */
    public var context: org.matrix.dma.gchat.proto.TypingContext
      @JvmName("getContext")
      get() = _builder.getContext()
      @JvmName("setContext")
      set(value) {
        _builder.setContext(value)
      }
    /**
     * <code>optional .TypingContext context = 3;</code>
     */
    public fun clearContext() {
      _builder.clearContext()
    }
    /**
     * <code>optional .TypingContext context = 3;</code>
     * @return Whether the context field is set.
     */
    public fun hasContext(): kotlin.Boolean {
      return _builder.hasContext()
    }
    public val TypingStateChangedEventKt.Dsl.contextOrNull: org.matrix.dma.gchat.proto.TypingContext?
      get() = _builder.contextOrNull

    /**
     * <code>optional int64 start_timestamp_usec = 4;</code>
     */
    public var startTimestampUsec: kotlin.Long
      @JvmName("getStartTimestampUsec")
      get() = _builder.getStartTimestampUsec()
      @JvmName("setStartTimestampUsec")
      set(value) {
        _builder.setStartTimestampUsec(value)
      }
    /**
     * <code>optional int64 start_timestamp_usec = 4;</code>
     */
    public fun clearStartTimestampUsec() {
      _builder.clearStartTimestampUsec()
    }
    /**
     * <code>optional int64 start_timestamp_usec = 4;</code>
     * @return Whether the startTimestampUsec field is set.
     */
    public fun hasStartTimestampUsec(): kotlin.Boolean {
      return _builder.hasStartTimestampUsec()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.TypingStateChangedEvent.copy(block: org.matrix.dma.gchat.proto.TypingStateChangedEventKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.TypingStateChangedEvent =
  org.matrix.dma.gchat.proto.TypingStateChangedEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.matrix.dma.gchat.proto.TypingStateChangedEventOrBuilder.userIdOrNull: org.matrix.dma.gchat.proto.UserId?
  get() = if (hasUserId()) getUserId() else null

public val org.matrix.dma.gchat.proto.TypingStateChangedEventOrBuilder.contextOrNull: org.matrix.dma.gchat.proto.TypingContext?
  get() = if (hasContext()) getContext() else null

