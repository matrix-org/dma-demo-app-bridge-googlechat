//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google_chat.proto

package org.matrix.dma.gchat.proto;

@kotlin.jvm.JvmName("-initializeuploadMetadata")
public inline fun uploadMetadata(block: org.matrix.dma.gchat.proto.UploadMetadataKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.UploadMetadata =
  org.matrix.dma.gchat.proto.UploadMetadataKt.Dsl._create(org.matrix.dma.gchat.proto.UploadMetadata.newBuilder()).apply { block() }._build()
public object UploadMetadataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.matrix.dma.gchat.proto.UploadMetadata.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.matrix.dma.gchat.proto.UploadMetadata.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.matrix.dma.gchat.proto.UploadMetadata = _builder.build()

    /**
     * <pre>
     *oneof Payload {
     * </pre>
     *
     * <code>optional string attachment_token = 1;</code>
     */
    public var attachmentToken: kotlin.String
      @JvmName("getAttachmentToken")
      get() = _builder.getAttachmentToken()
      @JvmName("setAttachmentToken")
      set(value) {
        _builder.setAttachmentToken(value)
      }
    /**
     * <pre>
     *oneof Payload {
     * </pre>
     *
     * <code>optional string attachment_token = 1;</code>
     */
    public fun clearAttachmentToken() {
      _builder.clearAttachmentToken()
    }
    /**
     * <pre>
     *oneof Payload {
     * </pre>
     *
     * <code>optional string attachment_token = 1;</code>
     * @return Whether the attachmentToken field is set.
     */
    public fun hasAttachmentToken(): kotlin.Boolean {
      return _builder.hasAttachmentToken()
    }

    /**
     * <pre>
     *optional BackendUploadMetadata backend_upload_metadata = 2;
     * }
     * </pre>
     *
     * <code>optional string content_name = 3;</code>
     */
    public var contentName: kotlin.String
      @JvmName("getContentName")
      get() = _builder.getContentName()
      @JvmName("setContentName")
      set(value) {
        _builder.setContentName(value)
      }
    /**
     * <pre>
     *optional BackendUploadMetadata backend_upload_metadata = 2;
     * }
     * </pre>
     *
     * <code>optional string content_name = 3;</code>
     */
    public fun clearContentName() {
      _builder.clearContentName()
    }
    /**
     * <pre>
     *optional BackendUploadMetadata backend_upload_metadata = 2;
     * }
     * </pre>
     *
     * <code>optional string content_name = 3;</code>
     * @return Whether the contentName field is set.
     */
    public fun hasContentName(): kotlin.Boolean {
      return _builder.hasContentName()
    }

    /**
     * <code>optional string content_type = 4;</code>
     */
    public var contentType: kotlin.String
      @JvmName("getContentType")
      get() = _builder.getContentType()
      @JvmName("setContentType")
      set(value) {
        _builder.setContentType(value)
      }
    /**
     * <code>optional string content_type = 4;</code>
     */
    public fun clearContentType() {
      _builder.clearContentType()
    }
    /**
     * <code>optional string content_type = 4;</code>
     * @return Whether the contentType field is set.
     */
    public fun hasContentType(): kotlin.Boolean {
      return _builder.hasContentType()
    }

    /**
     * <pre>
     *optional Dimension original_dimension = 5;
     * </pre>
     *
     * <code>optional string local_id = 6;</code>
     */
    public var localId: kotlin.String
      @JvmName("getLocalId")
      get() = _builder.getLocalId()
      @JvmName("setLocalId")
      set(value) {
        _builder.setLocalId(value)
      }
    /**
     * <pre>
     *optional Dimension original_dimension = 5;
     * </pre>
     *
     * <code>optional string local_id = 6;</code>
     */
    public fun clearLocalId() {
      _builder.clearLocalId()
    }
    /**
     * <pre>
     *optional Dimension original_dimension = 5;
     * </pre>
     *
     * <code>optional string local_id = 6;</code>
     * @return Whether the localId field is set.
     */
    public fun hasLocalId(): kotlin.Boolean {
      return _builder.hasLocalId()
    }

    /**
     * <pre>
     * optional VideoReference video_reference = 7;
     * optional VirusScanResult virus_scan_result = 8;
     * </pre>
     *
     * <code>optional string cloned_drive_id = 9;</code>
     */
    public var clonedDriveId: kotlin.String
      @JvmName("getClonedDriveId")
      get() = _builder.getClonedDriveId()
      @JvmName("setClonedDriveId")
      set(value) {
        _builder.setClonedDriveId(value)
      }
    /**
     * <pre>
     * optional VideoReference video_reference = 7;
     * optional VirusScanResult virus_scan_result = 8;
     * </pre>
     *
     * <code>optional string cloned_drive_id = 9;</code>
     */
    public fun clearClonedDriveId() {
      _builder.clearClonedDriveId()
    }
    /**
     * <pre>
     * optional VideoReference video_reference = 7;
     * optional VirusScanResult virus_scan_result = 8;
     * </pre>
     *
     * <code>optional string cloned_drive_id = 9;</code>
     * @return Whether the clonedDriveId field is set.
     */
    public fun hasClonedDriveId(): kotlin.Boolean {
      return _builder.hasClonedDriveId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.UploadMetadata.copy(block: org.matrix.dma.gchat.proto.UploadMetadataKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.UploadMetadata =
  org.matrix.dma.gchat.proto.UploadMetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

