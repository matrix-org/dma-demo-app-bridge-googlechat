//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google_chat.proto

package org.matrix.dma.gchat.proto;

@kotlin.jvm.JvmName("-initializetypingContext")
public inline fun typingContext(block: org.matrix.dma.gchat.proto.TypingContextKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.TypingContext =
  org.matrix.dma.gchat.proto.TypingContextKt.Dsl._create(org.matrix.dma.gchat.proto.TypingContext.newBuilder()).apply { block() }._build()
public object TypingContextKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.matrix.dma.gchat.proto.TypingContext.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.matrix.dma.gchat.proto.TypingContext.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.matrix.dma.gchat.proto.TypingContext = _builder.build()

    /**
     * <pre>
     *oneof Context {
     * </pre>
     *
     * <code>optional .GroupId group_id = 1;</code>
     */
    public var groupId: org.matrix.dma.gchat.proto.GroupId
      @JvmName("getGroupId")
      get() = _builder.getGroupId()
      @JvmName("setGroupId")
      set(value) {
        _builder.setGroupId(value)
      }
    /**
     * <pre>
     *oneof Context {
     * </pre>
     *
     * <code>optional .GroupId group_id = 1;</code>
     */
    public fun clearGroupId() {
      _builder.clearGroupId()
    }
    /**
     * <pre>
     *oneof Context {
     * </pre>
     *
     * <code>optional .GroupId group_id = 1;</code>
     * @return Whether the groupId field is set.
     */
    public fun hasGroupId(): kotlin.Boolean {
      return _builder.hasGroupId()
    }
    public val TypingContextKt.Dsl.groupIdOrNull: org.matrix.dma.gchat.proto.GroupId?
      get() = _builder.groupIdOrNull

    /**
     * <pre>
     *}
     * </pre>
     *
     * <code>optional .TopicId topic_id = 2;</code>
     */
    public var topicId: org.matrix.dma.gchat.proto.TopicId
      @JvmName("getTopicId")
      get() = _builder.getTopicId()
      @JvmName("setTopicId")
      set(value) {
        _builder.setTopicId(value)
      }
    /**
     * <pre>
     *}
     * </pre>
     *
     * <code>optional .TopicId topic_id = 2;</code>
     */
    public fun clearTopicId() {
      _builder.clearTopicId()
    }
    /**
     * <pre>
     *}
     * </pre>
     *
     * <code>optional .TopicId topic_id = 2;</code>
     * @return Whether the topicId field is set.
     */
    public fun hasTopicId(): kotlin.Boolean {
      return _builder.hasTopicId()
    }
    public val TypingContextKt.Dsl.topicIdOrNull: org.matrix.dma.gchat.proto.TopicId?
      get() = _builder.topicIdOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.TypingContext.copy(block: org.matrix.dma.gchat.proto.TypingContextKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.TypingContext =
  org.matrix.dma.gchat.proto.TypingContextKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.matrix.dma.gchat.proto.TypingContextOrBuilder.groupIdOrNull: org.matrix.dma.gchat.proto.GroupId?
  get() = if (hasGroupId()) getGroupId() else null

public val org.matrix.dma.gchat.proto.TypingContextOrBuilder.topicIdOrNull: org.matrix.dma.gchat.proto.TopicId?
  get() = if (hasTopicId()) getTopicId() else null

