//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google_chat.proto

package org.matrix.dma.gchat.proto;

@kotlin.jvm.JvmName("-initializecatchUpResponse")
public inline fun catchUpResponse(block: org.matrix.dma.gchat.proto.CatchUpResponseKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.CatchUpResponse =
  org.matrix.dma.gchat.proto.CatchUpResponseKt.Dsl._create(org.matrix.dma.gchat.proto.CatchUpResponse.newBuilder()).apply { block() }._build()
public object CatchUpResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.matrix.dma.gchat.proto.CatchUpResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.matrix.dma.gchat.proto.CatchUpResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.matrix.dma.gchat.proto.CatchUpResponse = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class EventsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .Event events = 1;</code>
     */
     public val events: com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event, EventsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getEventsList()
      )
    /**
     * <code>repeated .Event events = 1;</code>
     * @param value The events to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addEvents")
    public fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event, EventsProxy>.add(value: org.matrix.dma.gchat.proto.Event) {
      _builder.addEvents(value)
    }
    /**
     * <code>repeated .Event events = 1;</code>
     * @param value The events to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignEvents")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event, EventsProxy>.plusAssign(value: org.matrix.dma.gchat.proto.Event) {
      add(value)
    }
    /**
     * <code>repeated .Event events = 1;</code>
     * @param values The events to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllEvents")
    public fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event, EventsProxy>.addAll(values: kotlin.collections.Iterable<org.matrix.dma.gchat.proto.Event>) {
      _builder.addAllEvents(values)
    }
    /**
     * <code>repeated .Event events = 1;</code>
     * @param values The events to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllEvents")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event, EventsProxy>.plusAssign(values: kotlin.collections.Iterable<org.matrix.dma.gchat.proto.Event>) {
      addAll(values)
    }
    /**
     * <code>repeated .Event events = 1;</code>
     * @param index The index to set the value at.
     * @param value The events to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setEvents")
    public operator fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event, EventsProxy>.set(index: kotlin.Int, value: org.matrix.dma.gchat.proto.Event) {
      _builder.setEvents(index, value)
    }
    /**
     * <code>repeated .Event events = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearEvents")
    public fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event, EventsProxy>.clear() {
      _builder.clearEvents()
    }


    /**
     * <code>optional .CatchUpResponse.ResponseStatus status = 2;</code>
     */
    public var status: org.matrix.dma.gchat.proto.CatchUpResponse.ResponseStatus
      @JvmName("getStatus")
      get() = _builder.getStatus()
      @JvmName("setStatus")
      set(value) {
        _builder.setStatus(value)
      }
    /**
     * <code>optional .CatchUpResponse.ResponseStatus status = 2;</code>
     */
    public fun clearStatus() {
      _builder.clearStatus()
    }
    /**
     * <code>optional .CatchUpResponse.ResponseStatus status = 2;</code>
     * @return Whether the status field is set.
     */
    public fun hasStatus(): kotlin.Boolean {
      return _builder.hasStatus()
    }

    /**
     * <code>optional .GroupData group_data = 3;</code>
     */
    public var groupData: org.matrix.dma.gchat.proto.GroupData
      @JvmName("getGroupData")
      get() = _builder.getGroupData()
      @JvmName("setGroupData")
      set(value) {
        _builder.setGroupData(value)
      }
    /**
     * <code>optional .GroupData group_data = 3;</code>
     */
    public fun clearGroupData() {
      _builder.clearGroupData()
    }
    /**
     * <code>optional .GroupData group_data = 3;</code>
     * @return Whether the groupData field is set.
     */
    public fun hasGroupData(): kotlin.Boolean {
      return _builder.hasGroupData()
    }
    public val CatchUpResponseKt.Dsl.groupDataOrNull: org.matrix.dma.gchat.proto.GroupData?
      get() = _builder.groupDataOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.CatchUpResponse.copy(block: org.matrix.dma.gchat.proto.CatchUpResponseKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.CatchUpResponse =
  org.matrix.dma.gchat.proto.CatchUpResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.matrix.dma.gchat.proto.CatchUpResponseOrBuilder.groupDataOrNull: org.matrix.dma.gchat.proto.GroupData?
  get() = if (hasGroupData()) getGroupData() else null

