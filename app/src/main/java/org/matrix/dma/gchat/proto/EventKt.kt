//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google_chat.proto

package org.matrix.dma.gchat.proto;

@kotlin.jvm.JvmName("-initializeevent")
public inline fun event(block: org.matrix.dma.gchat.proto.EventKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.Event =
  org.matrix.dma.gchat.proto.EventKt.Dsl._create(org.matrix.dma.gchat.proto.Event.newBuilder()).apply { block() }._build()
public object EventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.matrix.dma.gchat.proto.Event.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.matrix.dma.gchat.proto.Event.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.matrix.dma.gchat.proto.Event = _builder.build()

    /**
     * <code>optional .GroupId group_id = 1;</code>
     */
    public var groupId: org.matrix.dma.gchat.proto.GroupId
      @JvmName("getGroupId")
      get() = _builder.getGroupId()
      @JvmName("setGroupId")
      set(value) {
        _builder.setGroupId(value)
      }
    /**
     * <code>optional .GroupId group_id = 1;</code>
     */
    public fun clearGroupId() {
      _builder.clearGroupId()
    }
    /**
     * <code>optional .GroupId group_id = 1;</code>
     * @return Whether the groupId field is set.
     */
    public fun hasGroupId(): kotlin.Boolean {
      return _builder.hasGroupId()
    }
    public val EventKt.Dsl.groupIdOrNull: org.matrix.dma.gchat.proto.GroupId?
      get() = _builder.groupIdOrNull

    /**
     * <code>optional .Event.EventType type = 3;</code>
     */
    public var type: org.matrix.dma.gchat.proto.Event.EventType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>optional .Event.EventType type = 3;</code>
     */
    public fun clearType() {
      _builder.clearType()
    }
    /**
     * <code>optional .Event.EventType type = 3;</code>
     * @return Whether the type field is set.
     */
    public fun hasType(): kotlin.Boolean {
      return _builder.hasType()
    }

    /**
     * <pre>
     * This is the first event body
     * </pre>
     *
     * <code>optional .Event.EventBody body = 4;</code>
     */
    public var body: org.matrix.dma.gchat.proto.Event.EventBody
      @JvmName("getBody")
      get() = _builder.getBody()
      @JvmName("setBody")
      set(value) {
        _builder.setBody(value)
      }
    /**
     * <pre>
     * This is the first event body
     * </pre>
     *
     * <code>optional .Event.EventBody body = 4;</code>
     */
    public fun clearBody() {
      _builder.clearBody()
    }
    /**
     * <pre>
     * This is the first event body
     * </pre>
     *
     * <code>optional .Event.EventBody body = 4;</code>
     * @return Whether the body field is set.
     */
    public fun hasBody(): kotlin.Boolean {
      return _builder.hasBody()
    }
    public val EventKt.Dsl.bodyOrNull: org.matrix.dma.gchat.proto.Event.EventBody?
      get() = _builder.bodyOrNull

    /**
     * <code>optional .UserId user_id = 5;</code>
     */
    public var userId: org.matrix.dma.gchat.proto.UserId
      @JvmName("getUserId")
      get() = _builder.getUserId()
      @JvmName("setUserId")
      set(value) {
        _builder.setUserId(value)
      }
    /**
     * <code>optional .UserId user_id = 5;</code>
     */
    public fun clearUserId() {
      _builder.clearUserId()
    }
    /**
     * <code>optional .UserId user_id = 5;</code>
     * @return Whether the userId field is set.
     */
    public fun hasUserId(): kotlin.Boolean {
      return _builder.hasUserId()
    }
    public val EventKt.Dsl.userIdOrNull: org.matrix.dma.gchat.proto.UserId?
      get() = _builder.userIdOrNull

    /**
     * <pre>
     *oneof RevisionType {
     * </pre>
     *
     * <code>optional .WriteRevision user_revision = 6;</code>
     */
    public var userRevision: org.matrix.dma.gchat.proto.WriteRevision
      @JvmName("getUserRevision")
      get() = _builder.getUserRevision()
      @JvmName("setUserRevision")
      set(value) {
        _builder.setUserRevision(value)
      }
    /**
     * <pre>
     *oneof RevisionType {
     * </pre>
     *
     * <code>optional .WriteRevision user_revision = 6;</code>
     */
    public fun clearUserRevision() {
      _builder.clearUserRevision()
    }
    /**
     * <pre>
     *oneof RevisionType {
     * </pre>
     *
     * <code>optional .WriteRevision user_revision = 6;</code>
     * @return Whether the userRevision field is set.
     */
    public fun hasUserRevision(): kotlin.Boolean {
      return _builder.hasUserRevision()
    }
    public val EventKt.Dsl.userRevisionOrNull: org.matrix.dma.gchat.proto.WriteRevision?
      get() = _builder.userRevisionOrNull

    /**
     * <code>optional .WriteRevision group_revision = 7;</code>
     */
    public var groupRevision: org.matrix.dma.gchat.proto.WriteRevision
      @JvmName("getGroupRevision")
      get() = _builder.getGroupRevision()
      @JvmName("setGroupRevision")
      set(value) {
        _builder.setGroupRevision(value)
      }
    /**
     * <code>optional .WriteRevision group_revision = 7;</code>
     */
    public fun clearGroupRevision() {
      _builder.clearGroupRevision()
    }
    /**
     * <code>optional .WriteRevision group_revision = 7;</code>
     * @return Whether the groupRevision field is set.
     */
    public fun hasGroupRevision(): kotlin.Boolean {
      return _builder.hasGroupRevision()
    }
    public val EventKt.Dsl.groupRevisionOrNull: org.matrix.dma.gchat.proto.WriteRevision?
      get() = _builder.groupRevisionOrNull

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class BodiesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     *}
     * </pre>
     *
     * <code>repeated .Event.EventBody bodies = 8;</code>
     */
     public val bodies: com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event.EventBody, BodiesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getBodiesList()
      )
    /**
     * <pre>
     *}
     * </pre>
     *
     * <code>repeated .Event.EventBody bodies = 8;</code>
     * @param value The bodies to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addBodies")
    public fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event.EventBody, BodiesProxy>.add(value: org.matrix.dma.gchat.proto.Event.EventBody) {
      _builder.addBodies(value)
    }
    /**
     * <pre>
     *}
     * </pre>
     *
     * <code>repeated .Event.EventBody bodies = 8;</code>
     * @param value The bodies to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignBodies")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event.EventBody, BodiesProxy>.plusAssign(value: org.matrix.dma.gchat.proto.Event.EventBody) {
      add(value)
    }
    /**
     * <pre>
     *}
     * </pre>
     *
     * <code>repeated .Event.EventBody bodies = 8;</code>
     * @param values The bodies to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllBodies")
    public fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event.EventBody, BodiesProxy>.addAll(values: kotlin.collections.Iterable<org.matrix.dma.gchat.proto.Event.EventBody>) {
      _builder.addAllBodies(values)
    }
    /**
     * <pre>
     *}
     * </pre>
     *
     * <code>repeated .Event.EventBody bodies = 8;</code>
     * @param values The bodies to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllBodies")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event.EventBody, BodiesProxy>.plusAssign(values: kotlin.collections.Iterable<org.matrix.dma.gchat.proto.Event.EventBody>) {
      addAll(values)
    }
    /**
     * <pre>
     *}
     * </pre>
     *
     * <code>repeated .Event.EventBody bodies = 8;</code>
     * @param index The index to set the value at.
     * @param value The bodies to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setBodies")
    public operator fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event.EventBody, BodiesProxy>.set(index: kotlin.Int, value: org.matrix.dma.gchat.proto.Event.EventBody) {
      _builder.setBodies(index, value)
    }
    /**
     * <pre>
     *}
     * </pre>
     *
     * <code>repeated .Event.EventBody bodies = 8;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearBodies")
    public fun com.google.protobuf.kotlin.DslList<org.matrix.dma.gchat.proto.Event.EventBody, BodiesProxy>.clear() {
      _builder.clearBodies()
    }

  }
  @kotlin.jvm.JvmName("-initializeeventBody")
  public inline fun eventBody(block: org.matrix.dma.gchat.proto.EventKt.EventBodyKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.Event.EventBody =
    org.matrix.dma.gchat.proto.EventKt.EventBodyKt.Dsl._create(org.matrix.dma.gchat.proto.Event.EventBody.newBuilder()).apply { block() }._build()
  public object EventBodyKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: org.matrix.dma.gchat.proto.Event.EventBody.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: org.matrix.dma.gchat.proto.Event.EventBody.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): org.matrix.dma.gchat.proto.Event.EventBody = _builder.build()

      /**
       * <pre>
       *oneof Type {
       * </pre>
       *
       * <code>optional .GroupViewedEvent group_viewed = 3;</code>
       */
      public var groupViewed: org.matrix.dma.gchat.proto.GroupViewedEvent
        @JvmName("getGroupViewed")
        get() = _builder.getGroupViewed()
        @JvmName("setGroupViewed")
        set(value) {
          _builder.setGroupViewed(value)
        }
      /**
       * <pre>
       *oneof Type {
       * </pre>
       *
       * <code>optional .GroupViewedEvent group_viewed = 3;</code>
       */
      public fun clearGroupViewed() {
        _builder.clearGroupViewed()
      }
      /**
       * <pre>
       *oneof Type {
       * </pre>
       *
       * <code>optional .GroupViewedEvent group_viewed = 3;</code>
       * @return Whether the groupViewed field is set.
       */
      public fun hasGroupViewed(): kotlin.Boolean {
        return _builder.hasGroupViewed()
      }
      public val EventBodyKt.Dsl.groupViewedOrNull: org.matrix.dma.gchat.proto.GroupViewedEvent?
        get() = _builder.groupViewedOrNull

      /**
       * <pre>
       *TopicViewedEvent topic_viewed = 4;
       *GroupUpdatedEvent group_updated = 5;
       * </pre>
       *
       * <code>optional .MessageEvent message_posted = 6;</code>
       */
      public var messagePosted: org.matrix.dma.gchat.proto.MessageEvent
        @JvmName("getMessagePosted")
        get() = _builder.getMessagePosted()
        @JvmName("setMessagePosted")
        set(value) {
          _builder.setMessagePosted(value)
        }
      /**
       * <pre>
       *TopicViewedEvent topic_viewed = 4;
       *GroupUpdatedEvent group_updated = 5;
       * </pre>
       *
       * <code>optional .MessageEvent message_posted = 6;</code>
       */
      public fun clearMessagePosted() {
        _builder.clearMessagePosted()
      }
      /**
       * <pre>
       *TopicViewedEvent topic_viewed = 4;
       *GroupUpdatedEvent group_updated = 5;
       * </pre>
       *
       * <code>optional .MessageEvent message_posted = 6;</code>
       * @return Whether the messagePosted field is set.
       */
      public fun hasMessagePosted(): kotlin.Boolean {
        return _builder.hasMessagePosted()
      }
      public val EventBodyKt.Dsl.messagePostedOrNull: org.matrix.dma.gchat.proto.MessageEvent?
        get() = _builder.messagePostedOrNull

      /**
       * <pre>
       *TopicMuteChangedEvent topic_mute_changed = 7;
       *UserSettingsChangedEvent user_settings_changed = 8;
       *GroupStarredEvent group_starred = 9;
       * </pre>
       *
       * <code>optional .WebPushNotificationEvent web_push_notification = 10;</code>
       */
      public var webPushNotification: org.matrix.dma.gchat.proto.WebPushNotificationEvent
        @JvmName("getWebPushNotification")
        get() = _builder.getWebPushNotification()
        @JvmName("setWebPushNotification")
        set(value) {
          _builder.setWebPushNotification(value)
        }
      /**
       * <pre>
       *TopicMuteChangedEvent topic_mute_changed = 7;
       *UserSettingsChangedEvent user_settings_changed = 8;
       *GroupStarredEvent group_starred = 9;
       * </pre>
       *
       * <code>optional .WebPushNotificationEvent web_push_notification = 10;</code>
       */
      public fun clearWebPushNotification() {
        _builder.clearWebPushNotification()
      }
      /**
       * <pre>
       *TopicMuteChangedEvent topic_mute_changed = 7;
       *UserSettingsChangedEvent user_settings_changed = 8;
       *GroupStarredEvent group_starred = 9;
       * </pre>
       *
       * <code>optional .WebPushNotificationEvent web_push_notification = 10;</code>
       * @return Whether the webPushNotification field is set.
       */
      public fun hasWebPushNotification(): kotlin.Boolean {
        return _builder.hasWebPushNotification()
      }
      public val EventBodyKt.Dsl.webPushNotificationOrNull: org.matrix.dma.gchat.proto.WebPushNotificationEvent?
        get() = _builder.webPushNotificationOrNull

      /**
       * <pre>
       *GroupUnreadSubscribedTopicCountUpdatedEvent group_unread_subscribed_topic_count_updated_event = 11;
       *InviteCountUpdatedEvent invite_count_updated = 13;
       * </pre>
       *
       * <code>optional .MembershipChangedEvent membership_changed = 14;</code>
       */
      public var membershipChanged: org.matrix.dma.gchat.proto.MembershipChangedEvent
        @JvmName("getMembershipChanged")
        get() = _builder.getMembershipChanged()
        @JvmName("setMembershipChanged")
        set(value) {
          _builder.setMembershipChanged(value)
        }
      /**
       * <pre>
       *GroupUnreadSubscribedTopicCountUpdatedEvent group_unread_subscribed_topic_count_updated_event = 11;
       *InviteCountUpdatedEvent invite_count_updated = 13;
       * </pre>
       *
       * <code>optional .MembershipChangedEvent membership_changed = 14;</code>
       */
      public fun clearMembershipChanged() {
        _builder.clearMembershipChanged()
      }
      /**
       * <pre>
       *GroupUnreadSubscribedTopicCountUpdatedEvent group_unread_subscribed_topic_count_updated_event = 11;
       *InviteCountUpdatedEvent invite_count_updated = 13;
       * </pre>
       *
       * <code>optional .MembershipChangedEvent membership_changed = 14;</code>
       * @return Whether the membershipChanged field is set.
       */
      public fun hasMembershipChanged(): kotlin.Boolean {
        return _builder.hasMembershipChanged()
      }
      public val EventBodyKt.Dsl.membershipChangedOrNull: org.matrix.dma.gchat.proto.MembershipChangedEvent?
        get() = _builder.membershipChangedOrNull

      /**
       * <pre>
       *GroupHideChangedEvent group_hide_changed = 15;
       *DriveAclFixProcessedEvent drive_acl_fix_processed = 16;
       *GroupNotificationSettingsUpdatedEvent group_notification_settings_updated = 17;
       *MessageDeletedEvent message_deleted = 18;
       *RetentionSettingsUpdatedEvent retention_settings_updated = 19;
       *TopicCreatedEvent topic_created = 21;
       *MessageReactionEvent message_reaction = 22;
       * </pre>
       *
       * <code>optional .UserStatusUpdatedEvent user_status_updated_event = 23;</code>
       */
      public var userStatusUpdatedEvent: org.matrix.dma.gchat.proto.UserStatusUpdatedEvent
        @JvmName("getUserStatusUpdatedEvent")
        get() = _builder.getUserStatusUpdatedEvent()
        @JvmName("setUserStatusUpdatedEvent")
        set(value) {
          _builder.setUserStatusUpdatedEvent(value)
        }
      /**
       * <pre>
       *GroupHideChangedEvent group_hide_changed = 15;
       *DriveAclFixProcessedEvent drive_acl_fix_processed = 16;
       *GroupNotificationSettingsUpdatedEvent group_notification_settings_updated = 17;
       *MessageDeletedEvent message_deleted = 18;
       *RetentionSettingsUpdatedEvent retention_settings_updated = 19;
       *TopicCreatedEvent topic_created = 21;
       *MessageReactionEvent message_reaction = 22;
       * </pre>
       *
       * <code>optional .UserStatusUpdatedEvent user_status_updated_event = 23;</code>
       */
      public fun clearUserStatusUpdatedEvent() {
        _builder.clearUserStatusUpdatedEvent()
      }
      /**
       * <pre>
       *GroupHideChangedEvent group_hide_changed = 15;
       *DriveAclFixProcessedEvent drive_acl_fix_processed = 16;
       *GroupNotificationSettingsUpdatedEvent group_notification_settings_updated = 17;
       *MessageDeletedEvent message_deleted = 18;
       *RetentionSettingsUpdatedEvent retention_settings_updated = 19;
       *TopicCreatedEvent topic_created = 21;
       *MessageReactionEvent message_reaction = 22;
       * </pre>
       *
       * <code>optional .UserStatusUpdatedEvent user_status_updated_event = 23;</code>
       * @return Whether the userStatusUpdatedEvent field is set.
       */
      public fun hasUserStatusUpdatedEvent(): kotlin.Boolean {
        return _builder.hasUserStatusUpdatedEvent()
      }
      public val EventBodyKt.Dsl.userStatusUpdatedEventOrNull: org.matrix.dma.gchat.proto.UserStatusUpdatedEvent?
        get() = _builder.userStatusUpdatedEventOrNull

      /**
       * <pre>
       *WorkingHoursSettingsUpdatedEvent working_hours_settings_updated_event = 24;
       *MessageSmartRepliesEvent message_smart_replies_event = 25;
       * </pre>
       *
       * <code>optional .TypingStateChangedEvent typing_state_changed_event = 26;</code>
       */
      public var typingStateChangedEvent: org.matrix.dma.gchat.proto.TypingStateChangedEvent
        @JvmName("getTypingStateChangedEvent")
        get() = _builder.getTypingStateChangedEvent()
        @JvmName("setTypingStateChangedEvent")
        set(value) {
          _builder.setTypingStateChangedEvent(value)
        }
      /**
       * <pre>
       *WorkingHoursSettingsUpdatedEvent working_hours_settings_updated_event = 24;
       *MessageSmartRepliesEvent message_smart_replies_event = 25;
       * </pre>
       *
       * <code>optional .TypingStateChangedEvent typing_state_changed_event = 26;</code>
       */
      public fun clearTypingStateChangedEvent() {
        _builder.clearTypingStateChangedEvent()
      }
      /**
       * <pre>
       *WorkingHoursSettingsUpdatedEvent working_hours_settings_updated_event = 24;
       *MessageSmartRepliesEvent message_smart_replies_event = 25;
       * </pre>
       *
       * <code>optional .TypingStateChangedEvent typing_state_changed_event = 26;</code>
       * @return Whether the typingStateChangedEvent field is set.
       */
      public fun hasTypingStateChangedEvent(): kotlin.Boolean {
        return _builder.hasTypingStateChangedEvent()
      }
      public val EventBodyKt.Dsl.typingStateChangedEventOrNull: org.matrix.dma.gchat.proto.TypingStateChangedEvent?
        get() = _builder.typingStateChangedEventOrNull

      /**
       * <pre>
       *GroupDeletedEvent group_deleted_event = 27;
       *BlockStateChangedEvent block_state_changed_event = 28;
       *ClearHistoryEvent clear_history_event = 29;
       *GroupSortTimestampChangedEvent group_sort_timestamp_changed_event = 30;
       *MarkAsUnreadEvent mark_as_unread_event = 32;
       * </pre>
       *
       * <code>optional .ReadReceiptChangedEvent read_receipt_changed = 33;</code>
       */
      public var readReceiptChanged: org.matrix.dma.gchat.proto.ReadReceiptChangedEvent
        @JvmName("getReadReceiptChanged")
        get() = _builder.getReadReceiptChanged()
        @JvmName("setReadReceiptChanged")
        set(value) {
          _builder.setReadReceiptChanged(value)
        }
      /**
       * <pre>
       *GroupDeletedEvent group_deleted_event = 27;
       *BlockStateChangedEvent block_state_changed_event = 28;
       *ClearHistoryEvent clear_history_event = 29;
       *GroupSortTimestampChangedEvent group_sort_timestamp_changed_event = 30;
       *MarkAsUnreadEvent mark_as_unread_event = 32;
       * </pre>
       *
       * <code>optional .ReadReceiptChangedEvent read_receipt_changed = 33;</code>
       */
      public fun clearReadReceiptChanged() {
        _builder.clearReadReceiptChanged()
      }
      /**
       * <pre>
       *GroupDeletedEvent group_deleted_event = 27;
       *BlockStateChangedEvent block_state_changed_event = 28;
       *ClearHistoryEvent clear_history_event = 29;
       *GroupSortTimestampChangedEvent group_sort_timestamp_changed_event = 30;
       *MarkAsUnreadEvent mark_as_unread_event = 32;
       * </pre>
       *
       * <code>optional .ReadReceiptChangedEvent read_receipt_changed = 33;</code>
       * @return Whether the readReceiptChanged field is set.
       */
      public fun hasReadReceiptChanged(): kotlin.Boolean {
        return _builder.hasReadReceiptChanged()
      }
      public val EventBodyKt.Dsl.readReceiptChangedOrNull: org.matrix.dma.gchat.proto.ReadReceiptChangedEvent?
        get() = _builder.readReceiptChangedOrNull

      /**
       * <code>optional .Event.EventType event_type = 12;</code>
       */
      public var eventType: org.matrix.dma.gchat.proto.Event.EventType
        @JvmName("getEventType")
        get() = _builder.getEventType()
        @JvmName("setEventType")
        set(value) {
          _builder.setEventType(value)
        }
      /**
       * <code>optional .Event.EventType event_type = 12;</code>
       */
      public fun clearEventType() {
        _builder.clearEventType()
      }
      /**
       * <code>optional .Event.EventType event_type = 12;</code>
       * @return Whether the eventType field is set.
       */
      public fun hasEventType(): kotlin.Boolean {
        return _builder.hasEventType()
      }

      /**
       * <code>optional int64 trace_id = 20;</code>
       */
      public var traceId: kotlin.Long
        @JvmName("getTraceId")
        get() = _builder.getTraceId()
        @JvmName("setTraceId")
        set(value) {
          _builder.setTraceId(value)
        }
      /**
       * <code>optional int64 trace_id = 20;</code>
       */
      public fun clearTraceId() {
        _builder.clearTraceId()
      }
      /**
       * <code>optional int64 trace_id = 20;</code>
       * @return Whether the traceId field is set.
       */
      public fun hasTraceId(): kotlin.Boolean {
        return _builder.hasTraceId()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.Event.copy(block: org.matrix.dma.gchat.proto.EventKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.Event =
  org.matrix.dma.gchat.proto.EventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.Event.EventBody.copy(block: org.matrix.dma.gchat.proto.EventKt.EventBodyKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.Event.EventBody =
  org.matrix.dma.gchat.proto.EventKt.EventBodyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.matrix.dma.gchat.proto.Event.EventBodyOrBuilder.groupViewedOrNull: org.matrix.dma.gchat.proto.GroupViewedEvent?
  get() = if (hasGroupViewed()) getGroupViewed() else null

public val org.matrix.dma.gchat.proto.Event.EventBodyOrBuilder.messagePostedOrNull: org.matrix.dma.gchat.proto.MessageEvent?
  get() = if (hasMessagePosted()) getMessagePosted() else null

public val org.matrix.dma.gchat.proto.Event.EventBodyOrBuilder.webPushNotificationOrNull: org.matrix.dma.gchat.proto.WebPushNotificationEvent?
  get() = if (hasWebPushNotification()) getWebPushNotification() else null

public val org.matrix.dma.gchat.proto.Event.EventBodyOrBuilder.membershipChangedOrNull: org.matrix.dma.gchat.proto.MembershipChangedEvent?
  get() = if (hasMembershipChanged()) getMembershipChanged() else null

public val org.matrix.dma.gchat.proto.Event.EventBodyOrBuilder.userStatusUpdatedEventOrNull: org.matrix.dma.gchat.proto.UserStatusUpdatedEvent?
  get() = if (hasUserStatusUpdatedEvent()) getUserStatusUpdatedEvent() else null

public val org.matrix.dma.gchat.proto.Event.EventBodyOrBuilder.typingStateChangedEventOrNull: org.matrix.dma.gchat.proto.TypingStateChangedEvent?
  get() = if (hasTypingStateChangedEvent()) getTypingStateChangedEvent() else null

public val org.matrix.dma.gchat.proto.Event.EventBodyOrBuilder.readReceiptChangedOrNull: org.matrix.dma.gchat.proto.ReadReceiptChangedEvent?
  get() = if (hasReadReceiptChanged()) getReadReceiptChanged() else null

public val org.matrix.dma.gchat.proto.EventOrBuilder.groupIdOrNull: org.matrix.dma.gchat.proto.GroupId?
  get() = if (hasGroupId()) getGroupId() else null

public val org.matrix.dma.gchat.proto.EventOrBuilder.bodyOrNull: org.matrix.dma.gchat.proto.Event.EventBody?
  get() = if (hasBody()) getBody() else null

public val org.matrix.dma.gchat.proto.EventOrBuilder.userIdOrNull: org.matrix.dma.gchat.proto.UserId?
  get() = if (hasUserId()) getUserId() else null

public val org.matrix.dma.gchat.proto.EventOrBuilder.userRevisionOrNull: org.matrix.dma.gchat.proto.WriteRevision?
  get() = if (hasUserRevision()) getUserRevision() else null

public val org.matrix.dma.gchat.proto.EventOrBuilder.groupRevisionOrNull: org.matrix.dma.gchat.proto.WriteRevision?
  get() = if (hasGroupRevision()) getGroupRevision() else null

