//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google_chat.proto

package org.matrix.dma.gchat.proto;

@kotlin.jvm.JvmName("-initializecatchUpRange")
public inline fun catchUpRange(block: org.matrix.dma.gchat.proto.CatchUpRangeKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.CatchUpRange =
  org.matrix.dma.gchat.proto.CatchUpRangeKt.Dsl._create(org.matrix.dma.gchat.proto.CatchUpRange.newBuilder()).apply { block() }._build()
public object CatchUpRangeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.matrix.dma.gchat.proto.CatchUpRange.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.matrix.dma.gchat.proto.CatchUpRange.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.matrix.dma.gchat.proto.CatchUpRange = _builder.build()

    /**
     * <code>optional int64 from_revision_timestamp = 1;</code>
     */
    public var fromRevisionTimestamp: kotlin.Long
      @JvmName("getFromRevisionTimestamp")
      get() = _builder.getFromRevisionTimestamp()
      @JvmName("setFromRevisionTimestamp")
      set(value) {
        _builder.setFromRevisionTimestamp(value)
      }
    /**
     * <code>optional int64 from_revision_timestamp = 1;</code>
     */
    public fun clearFromRevisionTimestamp() {
      _builder.clearFromRevisionTimestamp()
    }
    /**
     * <code>optional int64 from_revision_timestamp = 1;</code>
     * @return Whether the fromRevisionTimestamp field is set.
     */
    public fun hasFromRevisionTimestamp(): kotlin.Boolean {
      return _builder.hasFromRevisionTimestamp()
    }

    /**
     * <code>optional int64 to_revision_timestamp = 2;</code>
     */
    public var toRevisionTimestamp: kotlin.Long
      @JvmName("getToRevisionTimestamp")
      get() = _builder.getToRevisionTimestamp()
      @JvmName("setToRevisionTimestamp")
      set(value) {
        _builder.setToRevisionTimestamp(value)
      }
    /**
     * <code>optional int64 to_revision_timestamp = 2;</code>
     */
    public fun clearToRevisionTimestamp() {
      _builder.clearToRevisionTimestamp()
    }
    /**
     * <code>optional int64 to_revision_timestamp = 2;</code>
     * @return Whether the toRevisionTimestamp field is set.
     */
    public fun hasToRevisionTimestamp(): kotlin.Boolean {
      return _builder.hasToRevisionTimestamp()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.CatchUpRange.copy(block: org.matrix.dma.gchat.proto.CatchUpRangeKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.CatchUpRange =
  org.matrix.dma.gchat.proto.CatchUpRangeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

