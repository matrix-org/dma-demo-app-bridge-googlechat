//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google_chat.proto

package org.matrix.dma.gchat.proto;

@kotlin.jvm.JvmName("-initializereaction")
public inline fun reaction(block: org.matrix.dma.gchat.proto.ReactionKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.Reaction =
  org.matrix.dma.gchat.proto.ReactionKt.Dsl._create(org.matrix.dma.gchat.proto.Reaction.newBuilder()).apply { block() }._build()
public object ReactionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.matrix.dma.gchat.proto.Reaction.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.matrix.dma.gchat.proto.Reaction.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.matrix.dma.gchat.proto.Reaction = _builder.build()

    /**
     * <code>optional .Emoji emoji = 1;</code>
     */
    public var emoji: org.matrix.dma.gchat.proto.Emoji
      @JvmName("getEmoji")
      get() = _builder.getEmoji()
      @JvmName("setEmoji")
      set(value) {
        _builder.setEmoji(value)
      }
    /**
     * <code>optional .Emoji emoji = 1;</code>
     */
    public fun clearEmoji() {
      _builder.clearEmoji()
    }
    /**
     * <code>optional .Emoji emoji = 1;</code>
     * @return Whether the emoji field is set.
     */
    public fun hasEmoji(): kotlin.Boolean {
      return _builder.hasEmoji()
    }
    public val ReactionKt.Dsl.emojiOrNull: org.matrix.dma.gchat.proto.Emoji?
      get() = _builder.emojiOrNull

    /**
     * <code>optional int32 count = 2;</code>
     */
    public var count: kotlin.Int
      @JvmName("getCount")
      get() = _builder.getCount()
      @JvmName("setCount")
      set(value) {
        _builder.setCount(value)
      }
    /**
     * <code>optional int32 count = 2;</code>
     */
    public fun clearCount() {
      _builder.clearCount()
    }
    /**
     * <code>optional int32 count = 2;</code>
     * @return Whether the count field is set.
     */
    public fun hasCount(): kotlin.Boolean {
      return _builder.hasCount()
    }

    /**
     * <code>optional bool current_user_participated = 3;</code>
     */
    public var currentUserParticipated: kotlin.Boolean
      @JvmName("getCurrentUserParticipated")
      get() = _builder.getCurrentUserParticipated()
      @JvmName("setCurrentUserParticipated")
      set(value) {
        _builder.setCurrentUserParticipated(value)
      }
    /**
     * <code>optional bool current_user_participated = 3;</code>
     */
    public fun clearCurrentUserParticipated() {
      _builder.clearCurrentUserParticipated()
    }
    /**
     * <code>optional bool current_user_participated = 3;</code>
     * @return Whether the currentUserParticipated field is set.
     */
    public fun hasCurrentUserParticipated(): kotlin.Boolean {
      return _builder.hasCurrentUserParticipated()
    }

    /**
     * <code>optional int64 create_timestamp = 4;</code>
     */
    public var createTimestamp: kotlin.Long
      @JvmName("getCreateTimestamp")
      get() = _builder.getCreateTimestamp()
      @JvmName("setCreateTimestamp")
      set(value) {
        _builder.setCreateTimestamp(value)
      }
    /**
     * <code>optional int64 create_timestamp = 4;</code>
     */
    public fun clearCreateTimestamp() {
      _builder.clearCreateTimestamp()
    }
    /**
     * <code>optional int64 create_timestamp = 4;</code>
     * @return Whether the createTimestamp field is set.
     */
    public fun hasCreateTimestamp(): kotlin.Boolean {
      return _builder.hasCreateTimestamp()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.matrix.dma.gchat.proto.Reaction.copy(block: org.matrix.dma.gchat.proto.ReactionKt.Dsl.() -> kotlin.Unit): org.matrix.dma.gchat.proto.Reaction =
  org.matrix.dma.gchat.proto.ReactionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.matrix.dma.gchat.proto.ReactionOrBuilder.emojiOrNull: org.matrix.dma.gchat.proto.Emoji?
  get() = if (hasEmoji()) getEmoji() else null

